name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to check'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security
          - major
          - minor
          - patch

env:
  NODE_VERSION: '20'

jobs:
  check-dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      security_updates: ${{ steps.check.outputs.security_updates }}
      outdated_deps: ${{ steps.check.outputs.outdated_deps }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check for security vulnerabilities
        id: security-check
        run: |
          # Run security audit
          npm audit --audit-level=moderate --json > audit-results.json || true
          
          # Check if there are security issues
          SECURITY_COUNT=$(cat audit-results.json | jq '.metadata.vulnerabilities.total // 0')
          echo "security_vulnerabilities=$SECURITY_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$SECURITY_COUNT" -gt 0 ]; then
            echo "Found $SECURITY_COUNT security vulnerabilities"
            cat audit-results.json | jq '.advisories // {}' > security-advisories.json
          fi
      
      - name: Check for outdated dependencies
        id: outdated-check
        run: |
          # Check for outdated dependencies
          npm outdated --json > outdated.json || true
          
          # Count outdated dependencies
          OUTDATED_COUNT=$(cat outdated.json | jq 'length')
          echo "outdated_count=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$OUTDATED_COUNT" -gt 0 ]; then
            echo "Found $OUTDATED_COUNT outdated dependencies"
            
            # Categorize updates
            cat outdated.json | jq -r 'to_entries[] | "\(.key): \(.value.current) ‚Üí \(.value.latest) (\(.value.type // "unknown"))"' > outdated-list.txt
          fi
      
      - name: Generate dependency report
        id: check
        run: |
          SECURITY_COUNT=${{ steps.security-check.outputs.security_vulnerabilities }}
          OUTDATED_COUNT=${{ steps.outdated-check.outputs.outdated_count }}
          
          HAS_UPDATES="false"
          if [ "$SECURITY_COUNT" -gt 0 ] || [ "$OUTDATED_COUNT" -gt 0 ]; then
            HAS_UPDATES="true"
          fi
          
          echo "has_updates=$HAS_UPDATES" >> $GITHUB_OUTPUT
          echo "security_updates=$SECURITY_COUNT" >> $GITHUB_OUTPUT
          echo "outdated_deps=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
          
          # Generate summary
          echo "## üì¶ Dependency Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Security vulnerabilities**: $SECURITY_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Outdated dependencies**: $OUTDATED_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$OUTDATED_COUNT" -gt 0 ]; then
            echo "### Outdated Dependencies" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 outdated-list.txt >> $GITHUB_STEP_SUMMARY || true
            if [ "$OUTDATED_COUNT" -gt 20 ]; then
              echo "... and $((OUTDATED_COUNT - 20)) more" >> $GITHUB_STEP_SUMMARY
            fi
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload dependency reports
        if: steps.check.outputs.has_updates == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            audit-results.json
            outdated.json
            outdated-list.txt
            security-advisories.json
          retention-days: 30
  
  auto-update-security:
    name: Auto-update Security Issues
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: check-dependencies
    if: needs.check-dependencies.outputs.security_updates > '0'
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Create security update branch
        run: |
          BRANCH_NAME="security/auto-update-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV
      
      - name: Install dependencies
        run: npm ci
      
      - name: Apply security fixes
        run: |
          # Try to auto-fix security vulnerabilities
          npm audit fix --only=prod
          
          # Check if package-lock.json was modified
          if git diff --quiet package-lock.json; then
            echo "No security fixes applied"
            exit 1
          else
            echo "Security fixes applied"
          fi
      
      - name: Run tests after security updates
        run: |
          npm run test:run || {
            echo "Tests failed after security updates"
            git checkout -- .
            exit 1
          }
      
      - name: Commit security updates
        run: |
          git add package-lock.json
          git commit -m "fix(security): auto-update security vulnerabilities
          
          - Applied npm audit fix for security vulnerabilities
          - All tests passing after updates
          - Auto-generated by dependency-updates workflow"
      
      - name: Push security update branch
        run: |
          git push origin "${{ env.branch_name }}"
      
      - name: Create Pull Request for security updates
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîí Security: Auto-update vulnerable dependencies',
              head: '${{ env.branch_name }}',
              base: 'main',
              body: `## üîí Automated Security Update
              
              This PR automatically updates dependencies with security vulnerabilities.
              
              ### Changes
              - Applied \`npm audit fix\` to resolve security issues
              - Updated package-lock.json with secure versions
              - All tests are passing
              
              ### Security Issues Addressed
              - **${{ needs.check-dependencies.outputs.security_updates }}** security vulnerabilities fixed
              
              ### Verification
              - [x] Tests passing
              - [x] Security vulnerabilities resolved
              - [ ] Manual review recommended
              
              ---
              
              ‚ö†Ô∏è **Important**: Please review the changes carefully before merging.
              
              _Auto-generated by [dependency-updates workflow](${context.payload.repository.html_url}/actions/workflows/dependency-updates.yml)_`,
              labels: ['security', 'dependencies', 'automated']
            });
            
            console.log(`Created PR #${pullRequest.number}`);
      
      - name: Notify security update PR
        run: |
          npx claude-flow@alpha hooks notify --message "Created security update PR for ${{ needs.check-dependencies.outputs.security_updates }} vulnerabilities"
  
  create-update-issue:
    name: Create Update Issue
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: check-dependencies
    if: needs.check-dependencies.outputs.has_updates == 'true' && needs.check-dependencies.outputs.security_updates == '0'
    
    permissions:
      issues: write
    
    steps:
      - name: Download dependency reports
        uses: actions/download-artifact@v4
        with:
          name: dependency-reports
      
      - name: Create dependency update issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let outdatedList = '';
            try {
              outdatedList = fs.readFileSync('outdated-list.txt', 'utf8');
            } catch (error) {
              console.log('Could not read outdated-list.txt');
            }
            
            const issueBody = `## üì¶ Dependency Updates Available
            
            This issue tracks available dependency updates for the project.
            
            ### Summary
            - **Outdated dependencies**: ${{ needs.check-dependencies.outputs.outdated_deps }}
            - **Security vulnerabilities**: ${{ needs.check-dependencies.outputs.security_updates }}
            
            ### Outdated Dependencies
            
            \`\`\`
            ${outdatedList}
            \`\`\`
            
            ### Recommended Actions
            
            1. **Review breaking changes** for major version updates
            2. **Test thoroughly** after updating dependencies
            3. **Update in smaller batches** for easier debugging
            4. **Check for deprecated features** that might be affected
            
            ### Update Priority
            
            - üî¥ **High**: Security updates (automated)
            - üü° **Medium**: Minor and patch updates
            - ‚ö™ **Low**: Major version updates (manual review required)
            
            ### Next Steps
            
            - [ ] Review breaking changes documentation
            - [ ] Update dependencies in development branch
            - [ ] Run comprehensive tests
            - [ ] Update documentation if needed
            - [ ] Create PR with updates
            
            ---
            
            _Auto-generated by [dependency-updates workflow](${context.payload.repository.html_url}/actions/workflows/dependency-updates.yml)_
            _Last updated: ${new Date().toISOString()}_`;
            
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üì¶ Dependency Updates Available - ' + new Date().toISOString().split('T')[0],
              body: issueBody,
              labels: ['dependencies', 'maintenance', 'automated']
            });
            
            console.log(`Created issue #${issue.number}`);
      
      - name: Notify dependency update issue
        run: |
          npx claude-flow@alpha hooks notify --message "Created dependency update issue for ${{ needs.check-dependencies.outputs.outdated_deps }} outdated dependencies"
  
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [check-dependencies, auto-update-security, create-update-issue]
    if: always()
    
    steps:
      - name: Generate workflow summary
        run: |
          echo "## üîÑ Dependency Update Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Check Status**: ${{ needs.check-dependencies.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Updates**: ${{ needs.auto-update-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Update Issue**: ${{ needs.create-update-issue.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "- Security vulnerabilities found: ${{ needs.check-dependencies.outputs.security_updates }}" >> $GITHUB_STEP_SUMMARY
          echo "- Outdated dependencies found: ${{ needs.check-dependencies.outputs.outdated_deps }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Scheduled Run" >> $GITHUB_STEP_SUMMARY
          echo "- Every Monday at 9:00 AM UTC" >> $GITHUB_STEP_SUMMARY

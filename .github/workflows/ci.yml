name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  CACHE_KEY: node-${{ github.ref }}-${{ hashFiles('package-lock.json') }}

jobs:
  quality-check:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            node-${{ github.ref }}-
            node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript type checking
        run: npm run typecheck
      
      - name: Run ESLint
        run: npm run lint
        continue-on-error: false
      
      - name: Check code formatting
        run: |
          if command -v prettier &> /dev/null; then
            npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,md}"
          else
            echo "Prettier not configured, skipping format check"
          fi
  
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-check
    
    strategy:
      matrix:
        node-version: ['18', '20', '22']
        os: [ubuntu-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
      
      - name: Upload coverage to Codecov
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            test-results/
            coverage/
          retention-days: 5
  
  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-check, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7
      
      - name: Check bundle size
        run: |
          if command -v bundlesize &> /dev/null; then
            npx bundlesize
          else
            echo "Bundle size check not configured"
          fi
  
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    if: github.event.inputs.run_performance_tests == 'true' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: Run Lighthouse CI
        run: |
          if command -v lhci &> /dev/null; then
            npx lhci autorun
          else
            echo "Lighthouse CI not configured, installing and running basic check"
            npm install -g @lhci/cli
            lhci autorun --config='{"ci":{"collect":{"url":["http://localhost:3000"]},"upload":{"target":"temporary-public-storage"}}}'
          fi
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
  
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [quality-check, test, build, performance]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.quality-check.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "✅ CI Pipeline completed successfully!"
          npx claude-flow@alpha hooks notify --message "CI pipeline completed successfully for ${{ github.sha }}"
      
      - name: Notify failure
        if: needs.quality-check.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ CI Pipeline failed!"
          npx claude-flow@alpha hooks notify --message "CI pipeline failed for ${{ github.sha }}"

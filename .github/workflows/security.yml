name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: |
          npm audit --audit-level=high --omit=dev --json > npm-audit.json || true
          npm audit --audit-level=high --omit=dev || true
        continue-on-error: true
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk.sarif --file=package.json
      
      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('snyk.sarif') != ''
        with:
          sarif_file: snyk.sarif
          category: dependency-scan
  
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-extended,+security-and-quality
          source-root: src
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project for analysis
        run: |
          npm run typecheck
          npm run build
        env:
          NODE_ENV: production
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
          upload: true
          wait-for-processing: true
  
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json --no-update
        continue-on-error: true
      
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml
          log-level: info
          fail-action: true
          redact: true
  
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 12
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          if [ -f "Dockerfile" ]; then
            docker build -t agent-rpg:${{ github.sha }} .
          else
            echo "Creating optimized Dockerfile for security scanning"
            cat > Dockerfile << 'EOF'
          FROM node:20-alpine AS base
          
          # Install security updates
          RUN apk update && apk upgrade && \
              apk add --no-cache dumb-init && \
              rm -rf /var/cache/apk/*
          
          WORKDIR /app
          
          # Copy package files
          COPY package*.json ./
          
          # Install production dependencies only
          RUN npm ci --only=production --no-optional && \
              npm cache clean --force
          
          # Copy source code
          COPY . .
          
          # Build application
          RUN npm run build
          
          # Create non-root user
          RUN addgroup -g 1001 -S nodejs && \
              adduser -S nextjs -u 1001
          
          # Set proper permissions
          RUN chown -R nextjs:nodejs /app
          USER nextjs
          
          EXPOSE 3000
          
          # Use dumb-init for proper signal handling
          ENTRYPOINT ["dumb-init", "--"]
          CMD ["npm", "start"]
          EOF
            docker build -t agent-rpg:${{ github.sha }} .
          fi
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'agent-rpg:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
          ignore-unfixed: true
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
          category: container-scan
  
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install license-checker
        run: npm install -g license-checker
      
      - name: Check licenses
        run: |
          # Generate license reports
          license-checker --summary --excludePrivatePackages > licenses-summary.txt
          license-checker --excludePrivatePackages --csv --out licenses-full.csv || true
          
          echo "📄 License Summary:"
          cat licenses-summary.txt
          
          # Define approved licenses (security-vetted)
          APPROVED_LICENSES="MIT;Apache-2.0;BSD;ISC;0BSD;BSD-2-Clause;BSD-3-Clause;Apache-1.1;CC0-1.0;Unlicense;WTFPL;Python-2.0;BlueOak-1.0.0"
          
          # Check for problematic licenses with better error handling
          echo "🔍 Checking license compliance..."
          if license-checker --excludePrivatePackages --onlyAllow "$APPROVED_LICENSES" --summary; then
            echo "✅ All licenses are approved"
            echo "COMPLIANCE_STATUS=PASSED" >> $GITHUB_ENV
          else
            echo "⚠️ Some packages may have restrictive licenses"
            echo "COMPLIANCE_STATUS=WARNING" >> $GITHUB_ENV
            
            # Generate detailed report for non-compliant licenses
            echo "📋 Non-compliant packages:"
            license-checker --excludePrivatePackages --exclude "$APPROVED_LICENSES" --summary || true
            
            # Don't fail the build for license issues, just warn
            exit 0
          fi
      
      - name: Upload license reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-reports-${{ github.run_id }}
          path: |
            licenses-summary.txt
            licenses-full.csv
          retention-days: 30
      
      - name: Create license compliance summary
        if: always()
        run: |
          echo "## 📄 License Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "Status: ${{ env.COMPLIANCE_STATUS }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Summary:" >> $GITHUB_STEP_SUMMARY
          cat licenses-summary.txt >> $GITHUB_STEP_SUMMARY || true
  
  security-policy-check:
    name: Security Policy Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check security policy files
        run: |
          echo "🔍 Checking security policy compliance..."
          
          # Check for required security files
          MISSING_FILES=()
          
          if [ ! -f "SECURITY.md" ]; then
            MISSING_FILES+=("SECURITY.md")
          fi
          
          if [ ! -f ".gitleaks.toml" ]; then
            MISSING_FILES+=(".gitleaks.toml")
          fi
          
          if [ ${#MISSING_FILES[@]} -eq 0 ]; then
            echo "✅ All required security policy files present"
          else
            echo "⚠️ Missing security policy files: ${MISSING_FILES[*]}"
            echo "Consider adding these files for better security posture"
          fi
          
          # Validate .gitleaks.toml if present
          if [ -f ".gitleaks.toml" ]; then
            echo "✅ GitLeaks configuration found"
            echo "📋 GitLeaks rules count: $(grep -c '^\[\[rules\]\]' .gitleaks.toml || echo '0')"
          fi
  
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-check, codeql-analysis, secrets-scan, license-check, security-policy-check]
    if: always()
    
    steps:
      - name: Generate security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-check.result == 'success' && '✅ Passed' || needs.dependency-check.result == 'skipped' && '⏭️ Skipped' || '⚠️ Check Required' }} | NPM Audit + Snyk |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result == 'success' && '✅ Passed' || needs.codeql-analysis.result == 'skipped' && '⏭️ Skipped' || '⚠️ Check Required' }} | Static Analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Detection | ${{ needs.secrets-scan.result == 'success' && '✅ Passed' || needs.secrets-scan.result == 'skipped' && '⏭️ Skipped' || '⚠️ Check Required' }} | TruffleHog + GitLeaks |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result == 'success' && '✅ Passed' || needs.license-check.result == 'skipped' && '⏭️ Skipped' || '⚠️ Check Required' }} | Compliance Validation |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Policy | ${{ needs.security-policy-check.result == 'success' && '✅ Passed' || needs.security-policy-check.result == 'skipped' && '⏭️ Skipped' || '⚠️ Check Required' }} | Policy Files Check |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ Security Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Review any flagged vulnerabilities in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Update dependencies with known security issues" >> $GITHUB_STEP_SUMMARY
          echo "- 🔐 Verify no secrets are accidentally committed" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 Ensure license compliance for all dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Review container security scan results if applicable" >> $GITHUB_STEP_SUMMARY
          
          # Calculate overall security score
          PASSED_COUNT=0
          TOTAL_COUNT=5
          
          [ "${{ needs.dependency-check.result }}" == "success" ] && ((PASSED_COUNT++))
          [ "${{ needs.codeql-analysis.result }}" == "success" ] && ((PASSED_COUNT++))
          [ "${{ needs.secrets-scan.result }}" == "success" ] && ((PASSED_COUNT++))
          [ "${{ needs.license-check.result }}" == "success" ] && ((PASSED_COUNT++))
          [ "${{ needs.security-policy-check.result }}" == "success" ] && ((PASSED_COUNT++))
          
          SCORE=$((PASSED_COUNT * 100 / TOTAL_COUNT))
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Security Score: ${SCORE}% (${PASSED_COUNT}/${TOTAL_COUNT} checks passed)" >> $GITHUB_STEP_SUMMARY
      
      - name: Notify security scan completion
        run: |
          npx claude-flow@alpha hooks notify --message "Security scan completed for ${{ github.sha }} - Score: ${SCORE:-0}% - Checks: dependency(${{ needs.dependency-check.result }}), codeql(${{ needs.codeql-analysis.result }}), secrets(${{ needs.secrets-scan.result }}), license(${{ needs.license-check.result }}), policy(${{ needs.security-policy-check.result }})" || echo "Hook notification failed, continuing..."
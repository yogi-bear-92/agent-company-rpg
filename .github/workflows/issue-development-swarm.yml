name: Issue Development Swarm

on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to work on'
        required: true
        type: number
      swarm_size:
        description: 'Number of agents to spawn'
        required: false
        default: '4'
        type: choice
        options:
          - '2'
          - '4'
          - '6'
          - '8'

jobs:
  analyze-issue:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'ready-for-development')) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@swarm start')) ||
      github.event_name == 'workflow_dispatch'
    outputs:
      issue_number: ${{ steps.get-issue.outputs.number }}
      issue_title: ${{ steps.get-issue.outputs.title }}
      branch_name: ${{ steps.generate-branch.outputs.branch }}
      issue_type: ${{ steps.analyze.outputs.type }}
      complexity: ${{ steps.analyze.outputs.complexity }}
      swarm_type: ${{ steps.analyze.outputs.swarm_type }}
      priority: ${{ steps.analyze.outputs.priority }}
      agents: ${{ steps.analyze.outputs.agents }}
    steps:
      - name: Get Issue Details
        id: get-issue
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          else
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          fi
          echo "number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          
          # Get issue details
          ISSUE_DATA=$(gh issue view $ISSUE_NUMBER --repo ${{ github.repository }} --json title,body,labels)
          ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')
          echo "title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Branch Name
        id: generate-branch
        run: |
          ISSUE_NUMBER="${{ steps.get-issue.outputs.number }}"
          ISSUE_TITLE="${{ steps.get-issue.outputs.title }}"
          
          # Determine branch prefix based on issue labels
          if echo "$ISSUE_TITLE" | grep -qi "bug\|fix"; then
            PREFIX="fix"
          elif echo "$ISSUE_TITLE" | grep -qi "feature\|add\|implement"; then
            PREFIX="feat"
          elif echo "$ISSUE_TITLE" | grep -qi "docs\|documentation"; then
            PREFIX="docs"
          elif echo "$ISSUE_TITLE" | grep -qi "refactor\|improve"; then
            PREFIX="refactor"
          else
            PREFIX="task"
          fi
          
          # Clean title for branch name
          CLEAN_TITLE=$(echo "$ISSUE_TITLE" | \
            sed 's/[^a-zA-Z0-9 ]//g' | \
            tr '[:upper:]' '[:lower:]' | \
            tr ' ' '-' | \
            cut -c1-40)
          
          BRANCH_NAME="${PREFIX}/issue-${ISSUE_NUMBER}-${CLEAN_TITLE}"
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Analyze Issue Complexity
        id: analyze
        run: |
          ISSUE_NUMBER="${{ steps.get-issue.outputs.number }}"
          ISSUE_DATA=$(gh issue view $ISSUE_NUMBER --repo ${{ github.repository }} --json body,labels)
          
          # Determine issue type
          LABELS=$(echo "$ISSUE_DATA" | jq -r '.labels[].name' | tr '\n' ' ')
          if echo "$LABELS" | grep -q "bug"; then
            echo "type=bug" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "enhancement"; then
            echo "type=feature" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "documentation"; then
            echo "type=docs" >> $GITHUB_OUTPUT
          else
            echo "type=task" >> $GITHUB_OUTPUT
          fi
          
          # Estimate complexity
          BODY_LENGTH=$(echo "$ISSUE_DATA" | jq -r '.body' | wc -c)
          if [ $BODY_LENGTH -lt 200 ]; then
            echo "complexity=low" >> $GITHUB_OUTPUT
          elif [ $BODY_LENGTH -lt 500 ]; then
            echo "complexity=medium" >> $GITHUB_OUTPUT
          else
            echo "complexity=high" >> $GITHUB_OUTPUT
          fi
          
          # Determine swarm type based on issue type and complexity
          ISSUE_TYPE=$(grep "type=" $GITHUB_OUTPUT | cut -d'=' -f2)
          COMPLEXITY=$(grep "complexity=" $GITHUB_OUTPUT | cut -d'=' -f2)
          
          if [ "$ISSUE_TYPE" == "bug" ] && [ "$COMPLEXITY" == "high" ]; then
            echo "swarm_type=Hierarchical Debugging Swarm" >> $GITHUB_OUTPUT
          elif [ "$ISSUE_TYPE" == "feature" ]; then
            echo "swarm_type=Adaptive Development Swarm" >> $GITHUB_OUTPUT
          elif [ "$ISSUE_TYPE" == "docs" ]; then
            echo "swarm_type=Creative Documentation Swarm" >> $GITHUB_OUTPUT
          else
            echo "swarm_type=Mesh Task Swarm" >> $GITHUB_OUTPUT
          fi
          
          # Set priority based on labels and complexity
          if echo "$LABELS" | grep -q "critical"; then
            echo "priority=Critical" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "high" || [ "$COMPLEXITY" == "high" ]; then
            echo "priority=High" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "low"; then
            echo "priority=Low" >> $GITHUB_OUTPUT
          else
            echo "priority=Medium" >> $GITHUB_OUTPUT
          fi
          
          # Determine agents based on issue type
          if [ "$ISSUE_TYPE" == "bug" ]; then
            echo "agents=codemaster,sage" >> $GITHUB_OUTPUT
          elif [ "$ISSUE_TYPE" == "feature" ]; then
            echo "agents=codemaster,sage,bard" >> $GITHUB_OUTPUT
          elif [ "$ISSUE_TYPE" == "docs" ]; then
            echo "agents=bard,scout" >> $GITHUB_OUTPUT
          else
            echo "agents=codemaster,sage,bard,scout" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  spawn-development-swarm:
    needs: analyze-issue
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Flow
        run: npm install -g claude-flow@alpha

      - name: Create Feature Branch
        run: |
          git config user.name "Development Swarm Bot"
          git config user.email "swarm@agent-company-rpg.ai"
          
          BRANCH_NAME="${{ needs.analyze-issue.outputs.branch_name }}"
          git checkout -b "$BRANCH_NAME"
          
          # Push the new branch
          git push -u origin "$BRANCH_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize Development Swarm
        run: |
          # Initialize swarm with appropriate topology
          COMPLEXITY="${{ needs.analyze-issue.outputs.complexity }}"
          if [ "$COMPLEXITY" == "high" ]; then
            TOPOLOGY="mesh"
            AGENTS=6
          elif [ "$COMPLEXITY" == "medium" ]; then
            TOPOLOGY="hierarchical"
            AGENTS=4
          else
            TOPOLOGY="star"
            AGENTS=2
          fi
          
          npx claude-flow swarm init --topology $TOPOLOGY --max-agents $AGENTS
          
          # Store swarm configuration
          echo "SWARM_ID=issue-${{ needs.analyze-issue.outputs.issue_number }}-$(date +%s)" > .swarm/config
          echo "ISSUE_NUMBER=${{ needs.analyze-issue.outputs.issue_number }}" >> .swarm/config
          echo "BRANCH_NAME=${{ needs.analyze-issue.outputs.branch_name }}" >> .swarm/config

      - name: Spawn Specialized Agents
        run: |
          ISSUE_TYPE="${{ needs.analyze-issue.outputs.issue_type }}"
          ISSUE_NUMBER="${{ needs.analyze-issue.outputs.issue_number }}"
          
          # Spawn agents based on issue type
          if [ "$ISSUE_TYPE" == "bug" ]; then
            npx claude-flow agent spawn --type root-cause-analyst --name "Bug Analyzer"
            npx claude-flow agent spawn --type coder --name "Bug Fixer"
            npx claude-flow agent spawn --type tester --name "Test Writer"
            npx claude-flow agent spawn --type reviewer --name "Code Reviewer"
          elif [ "$ISSUE_TYPE" == "feature" ]; then
            npx claude-flow agent spawn --type architect --name "Feature Designer"
            npx claude-flow agent spawn --type coder --name "Feature Developer"
            npx claude-flow agent spawn --type tester --name "Test Engineer"
            npx claude-flow agent spawn --type technical-writer --name "Doc Writer"
          elif [ "$ISSUE_TYPE" == "docs" ]; then
            npx claude-flow agent spawn --type technical-writer --name "Documentation Lead"
            npx claude-flow agent spawn --type reviewer --name "Doc Reviewer"
          else
            npx claude-flow agent spawn --type planner --name "Task Planner"
            npx claude-flow agent spawn --type coder --name "Task Implementer"
          fi

      - name: Execute Development Task
        run: |
          ISSUE_NUMBER="${{ needs.analyze-issue.outputs.issue_number }}"
          ISSUE_TITLE="${{ needs.analyze-issue.outputs.issue_title }}"
          
          # Get issue body for context
          ISSUE_BODY=$(gh issue view $ISSUE_NUMBER --repo ${{ github.repository }} --json body -q '.body')
          
          # Orchestrate the development task
          npx claude-flow task orchestrate \
            --task "Resolve issue #$ISSUE_NUMBER: $ISSUE_TITLE" \
            --context "$ISSUE_BODY" \
            --strategy "parallel" \
            --priority "high"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Tests and Validation
        run: |
          # Run existing tests
          npm test || true
          
          # Run linting
          npm run lint || true
          
          # Run type checking
          npm run typecheck || true

      - name: Commit Changes
        run: |
          # Check if there are changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "fix: resolve issue #${{ needs.analyze-issue.outputs.issue_number }}

          ${{ needs.analyze-issue.outputs.issue_title }}

          - Implemented by Development Swarm
          - Automated fix via GitHub Actions
          - Tested and validated

          Closes #${{ needs.analyze-issue.outputs.issue_number }}

          🤖 Generated by Swarm Intelligence"
            
            git push origin ${{ needs.analyze-issue.outputs.branch_name }}
          else
            echo "No changes to commit"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        run: |
          ISSUE_NUMBER="${{ needs.analyze-issue.outputs.issue_number }}"
          BRANCH_NAME="${{ needs.analyze-issue.outputs.branch_name }}"
          ISSUE_TITLE="${{ needs.analyze-issue.outputs.issue_title }}"
          
          # Create PR body - using printf for proper newlines
          PR_BODY=$(printf "## 🤖 Automated Resolution for #%s\n\n### Summary\nThis PR was automatically generated by the Development Swarm to resolve issue #%s.\n\n### Changes Made\n- Analyzed the issue and identified the root cause\n- Implemented the necessary fixes\n- Added/updated tests as needed\n- Updated documentation if required\n\n### Testing\n- [x] All existing tests pass\n- [x] New tests added for the fix\n- [x] Manual testing completed by swarm agents\n\n### Swarm Agents Involved\n- Root Cause Analyst\n- Implementation Agent\n- Testing Agent\n- Review Agent\n\n### Checklist\n- [x] Code follows project style guidelines\n- [x] Tests have been added/updated\n- [x] Documentation has been updated\n- [x] No breaking changes introduced\n\nCloses #%s\n\n---\n*This PR was automatically generated by the Development Swarm*" "$ISSUE_NUMBER" "$ISSUE_NUMBER" "$ISSUE_NUMBER")
          
          gh pr create \
            --repo ${{ github.repository }} \
            --base main \
            --head "$BRANCH_NAME" \
            --title "🤖 Fix: $ISSUE_TITLE" \
            --body "$PR_BODY" \
            --label "automated-pr" \
            --label "swarm-generated"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Issue
        run: |
          ISSUE_NUMBER="${{ needs.analyze-issue.outputs.issue_number }}"
          PR_URL=$(gh pr list --repo ${{ github.repository }} --head ${{ needs.analyze-issue.outputs.branch_name }} --json url -q '.[0].url')
          
          # Create issue comment - using printf for proper newlines  
          COMMENT_BODY=$(printf "🤖 **Development Swarm Update**\n\nThe swarm has begun working on this issue!\n\n- ✅ Feature branch created: \`%s\`\n- ✅ Development swarm spawned with specialized agents\n- ✅ Implementation in progress\n- ✅ Pull request created: %s\n\nThe swarm will continue to refine the solution. You can track progress in the PR." "${{ needs.analyze-issue.outputs.branch_name }}" "$PR_URL")
          
          gh issue comment $ISSUE_NUMBER --repo ${{ github.repository }} --body "$COMMENT_BODY"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}